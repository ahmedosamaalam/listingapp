import { ObjectExtensions } from './ObjectExtensions';

/**
 * Helper Utility for the String class
 */
export class StringExtensions {
    /**
     * Check whether a function is null or empty
     * @param stringObject The string to check.
     */
    public static isNullOrEmpty(stringObject: string): boolean {
        if (ObjectExtensions.isNullOrUndefined(stringObject)) return true;
        if (stringObject === String()) return true;
        return false;
    }
    /**
     * Check whether a function is null or consists of whitespace
     * @param stringObject The string to check.
     */
    public static isNullOrWhitespace(stringObject: string): boolean {
        if (ObjectExtensions.isNullOrUndefined(stringObject)) return true;
        return StringExtensions.isNullOrEmpty(stringObject
            .toString() // <- Failsafe incase it's not a string
            .trim());
    }
    /**
     * Check whether a string starts with a certain character
     * @param stringObject The string to check.
     * @param startChar The character to check.
     */
    public static startsWith(stringObject: string, startChar: string): boolean {
        if (StringExtensions.isNullOrWhitespace(stringObject)) return false;
        return stringObject[0] === startChar;
    }
    /**
     * Check whether a string ends with a certain character
     * @param stringObject The string to check.
     * @param character The character to check.
     */
    public static endsWith(stringObject: string, character: string): boolean {
        if (StringExtensions.isNullOrWhitespace(stringObject)) return false;
        return stringObject[stringObject.length - 1] === character;
    }
    /**
     * Trim the given character at the start of the string
     * @param stringObject The string to trim.
     * @param character The character to trim.
     */
    public static trimStartCharacters(stringObject: string, character: string): string {
        if (StringExtensions.isNullOrWhitespace(stringObject))
            throw new ReferenceError(`The parameter stringObject is required`);
        if (StringExtensions.isNullOrWhitespace(character))
            character = ' ';

        return stringObject
            .replace(new RegExp(`^${character}*`, 'gmi'), String());
    }
    /**
     * Trim the given character at the end of the string
     * @param stringObject The string to trim.
     * @param character The character to trim.
     */
    public static trimEndCharacters(stringObject: string, character: string): string {
        if (StringExtensions.isNullOrWhitespace(stringObject))
            throw new ReferenceError(`The parameter stringObject is required`);
        if (StringExtensions.isNullOrWhitespace(character))
            character = ' ';

        return stringObject
            .replace(new RegExp(`${character}*$`, 'gmi'), String());
    }
    /**
     * Trim the given character at the start and end of the string
     * @param stringObject The string to trim.
     * @param character The character to trim.
     */
    public static trimCharacters(stringObject: string, character: string): string {
        if (StringExtensions.isNullOrWhitespace(stringObject))
            throw new ReferenceError(`The parameter stringObject is required`);
        if (StringExtensions.isNullOrWhitespace(character))
            return stringObject.trim();

        stringObject = StringExtensions.trimStartCharacters(stringObject, character);
        stringObject = StringExtensions.trimEndCharacters(stringObject, character);
        return stringObject;
    }
}

/** Interface to allow extension code completion */
export interface String {
    /**
     * Check whether a function is null or empty
     */
    isNullOrEmpty(): boolean;
    /**
     * Check whether a function is null or consists of whitespace
     */
    isNullOrWhitespace(): boolean;
    /**
     * Check whether a string starts with a certain character
     * @param startChar The character to check.
     */
    startsWith(startChar: string): boolean;
    /**
     * Check whether a string ends with a certain character
     * @param character The character to check.
     */
    endsWith(character: string): boolean;
    /**
     * Trim the given character at the start of the string
     * @param character The character to trim.
     */
    trimStartCharacters(character: string): string;
    /**
     * Trim the given character at the end of the string
     * @param character The character to trim.
     */
    trimEndCharacters(character: string): string;
    /**
     * Trim the given character at the start and end of the string
     * @param character The character to trim.
     */
    trimCharacters(character: string): string;
}

export default StringExtensions;

// tslint:disable-next-line:no-unused-expression
/** Apply extensions to the String interface */
!function applyStringExtensions(): void
{
    Object.prototype['isNullOrEmpty'] = () => StringExtensions.isNullOrEmpty(this);
    Object.prototype['isNullOrWhitespace'] = () => StringExtensions.isNullOrWhitespace(this);
    Object.prototype['startsWith'] = (startChar) =>
        StringExtensions.startsWith(this, startChar);
    Object.prototype['endsWith'] = (character) =>
        StringExtensions.endsWith(this, character);
    Object.prototype['trimStartCharacters'] = (character) =>
        StringExtensions.trimStartCharacters(this, character);
    Object.prototype['trimEndCharacters'] = (character) =>
        StringExtensions.trimEndCharacters(this, character);
    Object.prototype['trimCharacters'] = (character) =>
        StringExtensions.trimCharacters(this, character);
}();