
import { ObjectExtensions } from '../Extensions/ObjectExtensions';
import { StringExtensions } from '../Extensions/StringExtensions';

/** Implementation of the xmlHttpclient implementing async promises */
export class HttpClient {

    private url: string;
    private httpHeaders = new Array();

    /**
     * Set a value for the HttpHeaders for every request
     * @param key name of the header
     * @param value value of the header
     */
    public setHttpHeader (key: string, value: any): HttpClient {
        this.httpHeaders[key] = value;
        return this;
    }

    constructor(url: string) {
        if (StringExtensions.isNullOrWhitespace(url))
            throw new ReferenceError('The url needs to be defined');
        this.url = url;
    }

    /**
     * Send a HttpGet request to an endpoint
     * @param path Uri extra path parameter
     */
    public httpGetAsync<TModel>(path?: string): Promise<TModel>
    {
        return new Promise<TModel>((resolve, reject) =>
            this.httpGet(this.constructUrl(path),
                (responseText) => resolve(JSON.parse(responseText)),
                (responseText, statusCode) => reject(`${statusCode}: ${responseText}`)));
    }

    private constructUrl(path: string): string {
        if (StringExtensions.isNullOrWhitespace(path)) return this.url;
        return StringExtensions.trimEndCharacters(this.url, '/') +
        `/${StringExtensions.trimStartCharacters(path, '/')}`;
    }

    private applyRequestHeaders(xmlHttp: XMLHttpRequest): void {
        if (ObjectExtensions.isNullOrUndefined(this.httpHeaders)) return;

        const headers = this.httpHeaders;
        for (let headerKey in headers) {
            if (!headers.hasOwnProperty(headerKey)) continue;
            const headerValue = headers[headerKey];
            xmlHttp.setRequestHeader(headerKey, headerValue);
        }
    }

    private httpGet = (path?: string,
        success?: (responseText: string) => void,
        error?: (responseText: string, statusCode: number) => void): void =>
    {
        // ReSharper disable once InconsistentNaming (dafuq resharper?)
        const xmlHttp = new XMLHttpRequest();
        xmlHttp.onreadystatechange = () => {
            if (xmlHttp.readyState !== 4) return;
            if (xmlHttp.status === 200) {
                success(xmlHttp.responseText);
            } else {
                error(xmlHttp.responseText, xmlHttp.status);
            }
        };
        xmlHttp.open(`GET`, this.url as any, true); // true for asynchronous
        this.applyRequestHeaders(xmlHttp);
        xmlHttp.send(null);
    }
}

export default HttpClient;