import { ObjectExtensions } from '../Extensions/ObjectExtensions';

/**
 * Helper Utility for system types
 */
export class SystemTypeHelper {

    /**
     * Convert to string like intended regardless prototypal overrides.
     */
    private static systemToString: Function = Object.prototype.toString;

    /**
     * Check whether an object is an array
     * @param object The object to check whether it it's an array
     */
    public static isArray(object: any): boolean {
        if (object instanceof Array) return true;
        if (!ObjectExtensions.isNullOrUndefined(object.constructor)) return object.constructor === Array;
        if (!ObjectExtensions.isNullOrUndefined(Array.isArray)) return Array.isArray(object);
        return this.systemToString.call(object) === this.systemToString.call([]);
    }

    /**
     * Check whether an object is an object
     * @param object The object to check whether it it's an object
     */
    public static isObject(object: any): boolean {
        if (object instanceof Object) return true;
        if (!ObjectExtensions.isNullOrUndefined(object.constructor)) return object.constructor === Object;
        if (typeof(object) !==  typeof({})) return false;
        return this.systemToString.call(object) === this.systemToString.call({});
    }

    /**
     * Check whether an object is a string
     * @param object The object to check whether it it's an object
     */
    public static isString(object: any): boolean {
        if (object instanceof String) return true;
        if (!ObjectExtensions.isNullOrUndefined(object.constructor)) return object.constructor === String;
        return typeof(object) ===  typeof(String());
    }

    /**
     * Check whether an object is a function
     * @param object The object to check whether it it's a function
     */
    public static isFunction(object: any): boolean {
        return typeof(object) === typeof(this.isFunction);
    }

    /**
     * Check whether an object is a numeric value
     * @param object The object to check whether it it's a number
     */
    public static isNumber(object: any): boolean {
        return typeof(object) === typeof(0);
    }

    /**
     * Check whether an object is a boolean value
     * @param object The object to check whether it it's a boolean
     */
    public static isBoolean(object: any): boolean {
        return typeof(object) === typeof(true);
    }

}

export default SystemTypeHelper;