(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else {
		var a = factory();
		for(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];
	}
})(this, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// identity function for calling harmony imports with the correct context
/******/ 	__webpack_require__.i = function(value) { return value; };
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 5);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/* no static exports found */
/* all exports used */
/*!****************************************!*\
  !*** ./Extensions/ObjectExtensions.ts ***!
  \****************************************/
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports], __WEBPACK_AMD_DEFINE_RESULT__ = function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    /**
     * Helper Utility for objects and instances
     */
    var ObjectExtensions = (function () {
        function ObjectExtensions() {
        }
        /**
         * Check whether an object is null or undefined
         * @param object The object to check.
         */
        ObjectExtensions.isNullOrUndefined = function (object) {
            if (!!!object)
                return true; // This doesn't always work
            if (object === null)
                return true;
            if (object === undefined)
                return true;
            return false;
        };
        /**
         * Get all methods attached to an object
         * @param object The object to check.
         */
        ObjectExtensions.getAllMethods = function (object) {
            if (this.isNullOrUndefined(object))
                throw new ReferenceError('Cannot get methods from an undefined object');
            // Credit where credit is due: http://stackoverflow.com/a/35033472/2319865
            var props = [];
            do {
                var l = Object.getOwnPropertyNames(object)
                    .concat(Object.getOwnPropertySymbols(object).map(function (s) { return s.toString(); }))
                    .sort()
                    .filter(function (p, i, arr) {
                    return typeof object[p] === 'function' &&
                        p !== 'constructor' &&
                        (i === 0 || p !== arr[i - 1]) &&
                        props.indexOf(p) === -1;
                } // Not overridden in a child
                );
                props = props.concat(l);
                object = Object.getPrototypeOf(object); // Walk-up the prototype chain
            } while (!ObjectExtensions.isNullOrUndefined(object) &&
                // Not the the Object prototype methods (hasOwnProperty, etc...)
                !ObjectExtensions.isNullOrUndefined(Object.getPrototypeOf(object)));
            return props;
        };
        /**
         * Get the propertyDecorator for this object
         * @param object The object to check.
         * @param propertyName The name of the property the decorator is attached to.
         * @param descriptorName The name of the descript value where the decorator is attached to.
         */
        ObjectExtensions.getPropertyDecorator = function (object, propertyName, descriptorName) {
            if (!object.hasOwnProperty(propertyName))
                return null;
            var descriptor = Object.getOwnPropertyDescriptor(object, propertyName);
            if (ObjectExtensions.isNullOrUndefined(descriptor) ||
                ObjectExtensions.isNullOrUndefined(descriptor.value))
                return null;
            return descriptor.value[descriptorName];
        };
        return ObjectExtensions;
    }());
    exports.ObjectExtensions = ObjectExtensions;
    exports.default = ObjectExtensions;
    // tslint:disable-next-line:no-unused-expression
    /** Apply extensions to the Object interface */
    !function applyObjectExtensions() {
        var _this = this;
        Object.prototype['isNullOrUndefined'] = function () { return ObjectExtensions.isNullOrUndefined(_this); };
        Object.prototype['getAllMethods'] = function () { return ObjectExtensions.getAllMethods(_this); };
        Object.prototype['getPropertyDecorator'] = function (propertyName, descriptorName) {
            return ObjectExtensions.getPropertyDecorator(_this, propertyName, descriptorName);
        };
    }();
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 1 */
/* no static exports found */
/* all exports used */
/*!****************************************!*\
  !*** ./Extensions/StringExtensions.ts ***!
  \****************************************/
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(/*! ./ObjectExtensions */ 0)], __WEBPACK_AMD_DEFINE_RESULT__ = function (require, exports, ObjectExtensions_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    /**
     * Helper Utility for the String class
     */
    var StringExtensions = (function () {
        function StringExtensions() {
        }
        /**
         * Check whether a function is null or empty
         * @param stringObject The string to check.
         */
        StringExtensions.isNullOrEmpty = function (stringObject) {
            if (ObjectExtensions_1.ObjectExtensions.isNullOrUndefined(stringObject))
                return true;
            if (stringObject === String())
                return true;
            return false;
        };
        /**
         * Check whether a function is null or consists of whitespace
         * @param stringObject The string to check.
         */
        StringExtensions.isNullOrWhitespace = function (stringObject) {
            if (ObjectExtensions_1.ObjectExtensions.isNullOrUndefined(stringObject))
                return true;
            return StringExtensions.isNullOrEmpty(stringObject
                .toString() // <- Failsafe incase it's not a string
                .trim());
        };
        /**
         * Check whether a string starts with a certain character
         * @param stringObject The string to check.
         * @param startChar The character to check.
         */
        StringExtensions.startsWith = function (stringObject, startChar) {
            if (StringExtensions.isNullOrWhitespace(stringObject))
                return false;
            return stringObject[0] === startChar;
        };
        /**
         * Check whether a string ends with a certain character
         * @param stringObject The string to check.
         * @param character The character to check.
         */
        StringExtensions.endsWith = function (stringObject, character) {
            if (StringExtensions.isNullOrWhitespace(stringObject))
                return false;
            return stringObject[stringObject.length - 1] === character;
        };
        /**
         * Trim the given character at the start of the string
         * @param stringObject The string to trim.
         * @param character The character to trim.
         */
        StringExtensions.trimStartCharacters = function (stringObject, character) {
            if (StringExtensions.isNullOrWhitespace(stringObject))
                throw new ReferenceError("The parameter stringObject is required");
            if (StringExtensions.isNullOrWhitespace(character))
                character = ' ';
            return stringObject
                .replace(new RegExp("^" + character + "*", 'gmi'), String());
        };
        /**
         * Trim the given character at the end of the string
         * @param stringObject The string to trim.
         * @param character The character to trim.
         */
        StringExtensions.trimEndCharacters = function (stringObject, character) {
            if (StringExtensions.isNullOrWhitespace(stringObject))
                throw new ReferenceError("The parameter stringObject is required");
            if (StringExtensions.isNullOrWhitespace(character))
                character = ' ';
            return stringObject
                .replace(new RegExp(character + "*$", 'gmi'), String());
        };
        /**
         * Trim the given character at the start and end of the string
         * @param stringObject The string to trim.
         * @param character The character to trim.
         */
        StringExtensions.trimCharacters = function (stringObject, character) {
            if (StringExtensions.isNullOrWhitespace(stringObject))
                throw new ReferenceError("The parameter stringObject is required");
            if (StringExtensions.isNullOrWhitespace(character))
                return stringObject.trim();
            stringObject = StringExtensions.trimStartCharacters(stringObject, character);
            stringObject = StringExtensions.trimEndCharacters(stringObject, character);
            return stringObject;
        };
        return StringExtensions;
    }());
    exports.StringExtensions = StringExtensions;
    exports.default = StringExtensions;
    // tslint:disable-next-line:no-unused-expression
    /** Apply extensions to the String interface */
    !function applyStringExtensions() {
        var _this = this;
        Object.prototype['isNullOrEmpty'] = function () { return StringExtensions.isNullOrEmpty(_this); };
        Object.prototype['isNullOrWhitespace'] = function () { return StringExtensions.isNullOrWhitespace(_this); };
        Object.prototype['startsWith'] = function (startChar) {
            return StringExtensions.startsWith(_this, startChar);
        };
        Object.prototype['endsWith'] = function (character) {
            return StringExtensions.endsWith(_this, character);
        };
        Object.prototype['trimStartCharacters'] = function (character) {
            return StringExtensions.trimStartCharacters(_this, character);
        };
        Object.prototype['trimEndCharacters'] = function (character) {
            return StringExtensions.trimEndCharacters(_this, character);
        };
        Object.prototype['trimCharacters'] = function (character) {
            return StringExtensions.trimCharacters(_this, character);
        };
    }();
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 2 */
/* no static exports found */
/* all exports used */
/*!***************************************!*\
  !*** ./Decorators/SealedDecorator.ts ***!
  \***************************************/
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports], __WEBPACK_AMD_DEFINE_RESULT__ = function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    /**
     * Seal the class from inheritance
     */
    function sealed(constructor) {
        Object.seal(constructor);
        Object.seal(constructor.prototype);
        return constructor;
    }
    exports.sealed = sealed;
    exports.default = sealed;
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 3 */
/* no static exports found */
/* all exports used */
/*!*************************************!*\
  !*** ./Helpers/SystemTypeHelper.ts ***!
  \*************************************/
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(/*! ../Extensions/ObjectExtensions */ 0)], __WEBPACK_AMD_DEFINE_RESULT__ = function (require, exports, ObjectExtensions_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    /**
     * Helper Utility for system types
     */
    var SystemTypeHelper = (function () {
        function SystemTypeHelper() {
        }
        /**
         * Check whether an object is an array
         * @param object The object to check whether it it's an array
         */
        SystemTypeHelper.isArray = function (object) {
            if (object instanceof Array)
                return true;
            if (!ObjectExtensions_1.ObjectExtensions.isNullOrUndefined(object.constructor))
                return object.constructor === Array;
            if (!ObjectExtensions_1.ObjectExtensions.isNullOrUndefined(Array.isArray))
                return Array.isArray(object);
            return this.systemToString.call(object) === this.systemToString.call([]);
        };
        /**
         * Check whether an object is an object
         * @param object The object to check whether it it's an object
         */
        SystemTypeHelper.isObject = function (object) {
            if (object instanceof Object)
                return true;
            if (!ObjectExtensions_1.ObjectExtensions.isNullOrUndefined(object.constructor))
                return object.constructor === Object;
            if (typeof (object) !== typeof ({}))
                return false;
            return this.systemToString.call(object) === this.systemToString.call({});
        };
        /**
         * Check whether an object is a string
         * @param object The object to check whether it it's an object
         */
        SystemTypeHelper.isString = function (object) {
            if (object instanceof String)
                return true;
            if (!ObjectExtensions_1.ObjectExtensions.isNullOrUndefined(object.constructor))
                return object.constructor === String;
            return typeof (object) === typeof (String());
        };
        /**
         * Check whether an object is a function
         * @param object The object to check whether it it's a function
         */
        SystemTypeHelper.isFunction = function (object) {
            return typeof (object) === typeof (this.isFunction);
        };
        /**
         * Check whether an object is a numeric value
         * @param object The object to check whether it it's a number
         */
        SystemTypeHelper.isNumber = function (object) {
            return typeof (object) === typeof (0);
        };
        /**
         * Check whether an object is a boolean value
         * @param object The object to check whether it it's a boolean
         */
        SystemTypeHelper.isBoolean = function (object) {
            return typeof (object) === typeof (true);
        };
        return SystemTypeHelper;
    }());
    /**
     * Convert to string like intended regardless prototypal overrides.
     */
    SystemTypeHelper.systemToString = Object.prototype.toString;
    exports.SystemTypeHelper = SystemTypeHelper;
    exports.default = SystemTypeHelper;
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 4 */
/* no static exports found */
/* all exports used */
/*!**********************************!*\
  !*** ./HttpClient/HttpClient.ts ***!
  \**********************************/
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(/*! ../Extensions/ObjectExtensions */ 0), __webpack_require__(/*! ../Extensions/StringExtensions */ 1)], __WEBPACK_AMD_DEFINE_RESULT__ = function (require, exports, ObjectExtensions_1, StringExtensions_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    /** Implementation of the xmlHttpclient implementing async promises */
    var HttpClient = (function () {
        function HttpClient(url) {
            var _this = this;
            this.httpHeaders = new Array();
            this.httpGet = function (path, success, error) {
                // ReSharper disable once InconsistentNaming (dafuq resharper?)
                var xmlHttp = new XMLHttpRequest();
                xmlHttp.onreadystatechange = function () {
                    if (xmlHttp.readyState !== 4)
                        return;
                    if (xmlHttp.status === 200) {
                        success(xmlHttp.responseText);
                    }
                    else {
                        error(xmlHttp.responseText, xmlHttp.status);
                    }
                };
                xmlHttp.open("GET", _this.url, true); // true for asynchronous
                _this.applyRequestHeaders(xmlHttp);
                xmlHttp.send(null);
            };
            if (StringExtensions_1.StringExtensions.isNullOrWhitespace(url))
                throw new ReferenceError('The url needs to be defined');
            this.url = url;
        }
        /**
         * Set a value for the HttpHeaders for every request
         * @param key name of the header
         * @param value value of the header
         */
        HttpClient.prototype.setHttpHeader = function (key, value) {
            this.httpHeaders[key] = value;
            return this;
        };
        /**
         * Send a HttpGet request to an endpoint
         * @param path Uri extra path parameter
         */
        HttpClient.prototype.httpGetAsync = function (path) {
            var _this = this;
            return new Promise(function (resolve, reject) {
                return _this.httpGet(_this.constructUrl(path), function (responseText) { return resolve(JSON.parse(responseText)); }, function (responseText, statusCode) { return reject(statusCode + ": " + responseText); });
            });
        };
        HttpClient.prototype.constructUrl = function (path) {
            if (StringExtensions_1.StringExtensions.isNullOrWhitespace(path))
                return this.url;
            return StringExtensions_1.StringExtensions.trimEndCharacters(this.url, '/') +
                ("/" + StringExtensions_1.StringExtensions.trimStartCharacters(path, '/'));
        };
        HttpClient.prototype.applyRequestHeaders = function (xmlHttp) {
            if (ObjectExtensions_1.ObjectExtensions.isNullOrUndefined(this.httpHeaders))
                return;
            var headers = this.httpHeaders;
            for (var headerKey in headers) {
                if (!headers.hasOwnProperty(headerKey))
                    continue;
                var headerValue = headers[headerKey];
                xmlHttp.setRequestHeader(headerKey, headerValue);
            }
        };
        return HttpClient;
    }());
    exports.HttpClient = HttpClient;
    exports.default = HttpClient;
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ }),
/* 5 */
/* no static exports found */
/* all exports used */
/*!**************************!*\
  !*** ./TypeScriptKit.ts ***!
  \**************************/
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports, __webpack_require__(/*! ./Extensions/ObjectExtensions */ 0), __webpack_require__(/*! ./Extensions/StringExtensions */ 1), __webpack_require__(/*! ./Decorators/SealedDecorator */ 2), __webpack_require__(/*! ./Helpers/SystemTypeHelper */ 3), __webpack_require__(/*! ./HttpClient/HttpClient */ 4)], __WEBPACK_AMD_DEFINE_RESULT__ = function (require, exports, ObjectExtensions_1, StringExtensions_1, SealedDecorator_1, SystemTypeHelper_1, HttpClient_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ObjectExtensions = ObjectExtensions_1.ObjectExtensions;
    exports.StringExtensions = StringExtensions_1.StringExtensions;
    exports.sealed = SealedDecorator_1.sealed;
    exports.SystemTypeHelper = SystemTypeHelper_1.SystemTypeHelper;
    exports.HttpClient = HttpClient_1.HttpClient;
    exports.default = ObjectExtensions_1.ObjectExtensions;
}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ })
/******/ ]);
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,